// pkill okular ; dot hierarchy.dot -Tpdf -ohierarchy.pdf && xdg-open hierarchy.pdf

// Graphiv: HTML attributes
//   https://www.graphviz.org/doc/info/shapes.html#html


digraph {

  node [shape=box]


  template [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">xxx</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>yyy</b></font></td></tr>
<tr><td align="left" height="12">…<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>> ]

  langchain_core_output_parsers_base_BaseLLMOutputParser [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.output_parsers.base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BaseLLMOutputParser</b></font></td></tr>
<tr><td align="left" height="12">Abstract base class for parsing the<br align="Left"/>outputs of a model.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_core_output_parsers_base_BaseOutputParser [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.output_parsers.base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BaseOutputParser</b></font></td></tr>
<tr><td align="left" height="12">Base class to parse the output of<br align="Left"/>an LLM call.<br align="Left"/></td></tr>
<tr><td align="left">Output parsers help structure<br align="Left"/>language model responses.<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_core_output_parsers_transform_BaseTransformOutputParser [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.output_parsers.transform</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BaseTransformOutputParser</b></font></td></tr>
<tr><td align="left" height="12">Base class for an output parser that can<br align="Left"/>handle streaming input.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_core_output_parsers_string_StrOutputParser [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.output_parsers.string</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>StrOutputParser</b></font></td></tr>
<tr><td align="left" height="12">OutputParser that parses LLMResult<br align="Left"/>into the top likely string.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_core_runnables_base_RunnableSequence [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.runnables.base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>RunnableSequence</b></font></td></tr>
<tr><td align="left" height="12">Sequence of Runnables, where<br align="Left"/>the output of each is the input<br align="Left"/>of the next.<br align="Left"/></td></tr>
<tr><td align="left">RunnableSequence is the most<br align="Left"/>important composition operator<br align="Left"/>in LangChain as it is used in<br align="Left"/>virtually every chain.<br align="Left"/></td></tr>
<tr><td align="left" height="12">A RunnableSequence can be<br align="Left"/>instantiated directly or more<br align="Left"/>commonly by using the <font face="courier">|</font> operator<br align="Left"/>where either the left or<br align="Left"/>right operands (or both) must be<br align="Left"/>a Runnable.<br align="Left"/></td></tr>
<tr><td align="left" height="12">…<br align="Left"/></td></tr>
</table>    > ]

  langchain_core_language_models_llms_BaseLLM [
     label=<
<table border="0">
<tr><td align="left" colspan="2" valign="top"><font face="courier">langchain_core.language_models.llms</font></td></tr>
<tr><td align="left" colspan="2" valign="top" height="20"><font face="courier"><b>BaseLLM</b></font></td></tr>
<tr><td align="left" colspan="2" height="12">Base LLM abstract interface.<br align="Left"/></td></tr>
<tr><td align="left" colspan="2">It should take in a prompt and return a string.<br align="left"/></td></tr>
<tr><td align="left"><font face="courier">invoke()</font>:<br align="left"/></td><td>Transform a single input into an output.</td></tr>
</table>    > ]

  langchain_community_llms_ollama_Ollama [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_community.llms</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>ollama.Ollama</b></font></td></tr>
<tr><td align="left" height="12">…<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_core_runnables_base_RunnableSerializable [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.runnables.base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>RunnableSerializable</b></font></td></tr>
<tr><td align="left" height="12">…<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>> ]

  langchain_core_retrievers_BaseRetriever [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.retrievers</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BaseRetriever</b></font></td></tr>
<tr><td align="left" height="12">Abstract base class for a<br align="Left"/>Document retrieval system.<br align="Left"/></td></tr>
<tr><td align="left">A <i>retrieval system</i> is defined<br align="Left"/>as something that can take.<br align="Left"/>the most «relevant» Documents<br align="Left"/>from some source.<br align="left"/></td></tr>
</table>> ]

  langchain_core_vectorstores_VectorStoreRetriever [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.vectorstores</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>VectorStoreRetriever</b></font></td></tr>
<tr><td align="left" height="12">Base Retriever class for VectorStore.<br align="Left"/></td></tr>
<tr><td align="left"><font color="#c08020">Create a new model by parsing and validating<br align="Left"/>input data from keyword arguments.<br align="left"/></font></td></tr>
</table>> ]


  langchain_core_prompts_base_BasePromptTemplate [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.prompts.base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BasePromptTemplate</b></font></td></tr>
<tr><td align="left" height="12">Base class for all prompt templates,<br align="Left"/>returning a prompt.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_core_prompts_chat_BaseChatPromptTemplate [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.prompts.chat</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BaseChatPromptTemplate</b></font></td></tr>
<tr><td align="left" height="12">Base class for chat prompt templates.<br align="Left"/></td></tr>
<tr><td align="left"><font color="#c08020">Create a new model by parsing and validating<br align="Left"/>input data from keyword arguments.<br align="left"/></font></td></tr>
</table>> ]

  langchain_core_prompts_chat_ChatPromptTemplate [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.prompts.chat</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>ChatPromptTemplate</b></font></td></tr>
<tr><td align="left" height="12">Prompt template for chat models.<br align="Left"/></td></tr>
<tr><td align="left" height="12">Prompt templates convert raw<br align="Left"/>user input to better input to the LLM.<br align="Left"/></td></tr>
<tr><td align="left" height="12">Used to create flexible templated<br align="left"/>prompts for chat models.<br align="left"/></td></tr>
<tr><td align="left"><font face="courier">chain = prompt | llm</font><br align="left"/></td></tr>
</table>> ]

 langchain_core_language_models_base_BaseLanguageModel  [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.language_models.base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BaseLanguageModel</b></font></td></tr>
<tr><td align="left" height="12">Abstract base class for interfacing<br align="Left"/>with language models.<br align="Left"/></td></tr>
<tr><td align="left">All language model wrappers inherit<br align="left"/>from BaseLanguageModel.<br align="left"/></td></tr>
</table>    > ]

  langchain_core_language_models_chat_models_BaseChatModel [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.language_models.chat_models</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BaseChatModel</b></font></td></tr>
<tr><td align="left" height="12">Base class for Chat models.<br align="Left"/></td></tr>
<tr><td align="left"><font color="#c08020">Create a new model by parsing and validating<br align="Left"/>input data from keyword arguments.<br align="left"/></font></td></tr>
</table>    > ]

  langchain_openai_chat_models_base_ChatOpenAI [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_openai.chat_models.base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>ChatOpenAI</b></font></td></tr>
<tr><td align="left" height="12">…<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>> ]

  langchain_core_documents_base_Document [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.documents.base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>Document</b></font></td></tr>
<tr><td align="left" height="12">Class for storing a piece of text<br align="Left"/>and associated metadata (origin,<br align="Left"/>author etc.)<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_core_document_loaders_base_BaseLoader [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.document_loaders.base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BaseLoader</b></font></td></tr>
<tr><td align="left" height="12">Interface for Document Loader.<br align="Left"/></td></tr>
<tr><td align="left">Implementations should implement the<br align="Left"/>lazy-loading methods (<font face="courier">lazy_load()</font>,<br align="Left"/><font face="courier">alazy_load()</font>)<br align="Left"/>using generators to avoid loading all<br align="Left"/>Documents into memory at once.<br align="left"/></td></tr>
</table>    > ]

  langchain_community_document_loaders_web_base_WebBaseLoader [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_community.document_loaders.web_base</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>WebBaseLoader</b></font></td></tr>
<tr><td align="left" height="12">Load HTML pages using <font face="courier">urllib</font> and<br align="left"/>parse them with <font face="courier">BeautifulSoup</font>.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>> ]

  langchain_core_embeddings_embeddings_Embeddings [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.embeddings.embeddings</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>Embeddings</b></font></td></tr>
<tr><td align="left" height="12">Interface for embedding models.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>> ]

  langchain_community_embeddings_ollama_OllamaEmbeddings [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_community.embeddings.ollama</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>OllamaEmbeddings</b></font></td></tr>
<tr><td align="left" height="12">…<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]


  langchain_core_documents_transformers_BaseDocumentTransformer [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.documents.transformers</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>BaseDocumentTransformer</b></font></td></tr>
<tr><td align="left" height="12">Abstract base class for<br align="Left"/><i>document transformation systems</i>.<br align="Left"/></td></tr>
<tr><td align="left">A document transformation system takes a<br align="Left"/>sequence of Documents and<br align="Left"/>returns a sequence of transformed Documents.<br align="left"/></td></tr>
</table>    > ]

  langchain_text_splitters_base_TextSplitter [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_text_splitters.base.TextSplitter</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>TextSplitter</b></font></td></tr>
<tr><td align="left" height="12">Interface for splitting text into chunks.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_text_splitters_character_RecursiveCharacterTextSplitter [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_text_splitters.character</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>RecursiveCharacterTextSplitter</b></font></td></tr>
<tr><td align="left" height="12">Splitting text by recursively look at characters.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>Recursively tries to split by different characters to find one that works.<br align="left"/></td></tr>
</table>> ]

  langchain_core_vectorstores_VectorStore [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_core.vectorstores</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>VectorStore</b></font></td></tr>
<tr><td align="left" height="12">Interface for vector store.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_community_vectorstores_faiss_FAISS [
     label=<
<table border="0">
<tr><td align="left" valign="top"><font face="courier">langchain_community.vectorstores</font></td></tr>
<tr><td align="left" valign="top" height="20"><font face="courier"><b>faiss.FAISS</b></font></td></tr>
<tr><td align="left" height="12">Meta Faiss vector store.<br align="Left"/></td></tr>
<tr><td align="left">…<br align="Left"/>…<br align="left"/></td></tr>
</table>    > ]

  langchain_core_output_parsers_base_BaseLLMOutputParser -> langchain_core_output_parsers_base_BaseOutputParser
  langchain_core_output_parsers_base_BaseOutputParser -> langchain_core_output_parsers_transform_BaseTransformOutputParser 
  langchain_core_output_parsers_transform_BaseTransformOutputParser -> langchain_core_output_parsers_string_StrOutputParser

  langchain_core_language_models_base_BaseLanguageModel -> langchain_core_language_models_llms_BaseLLM
  langchain_core_language_models_llms_BaseLLM -> langchain_community_llms_ollama_Ollama

  langchain_core_vectorstores_VectorStore -> langchain_community_vectorstores_faiss_FAISS

  langchain_core_documents_transformers_BaseDocumentTransformer -> langchain_text_splitters_base_TextSplitter
  langchain_text_splitters_base_TextSplitter -> langchain_text_splitters_character_RecursiveCharacterTextSplitter

  langchain_core_embeddings_embeddings_Embeddings -> langchain_community_embeddings_ollama_OllamaEmbeddings

  langchain_core_document_loaders_base_BaseLoader -> langchain_community_document_loaders_web_base_WebBaseLoader

  langchain_core_runnables_base_RunnableSerializable -> langchain_core_runnables_base_RunnableSequence
  langchain_core_runnables_base_RunnableSerializable -> langchain_core_documents_base_Document

  langchain_core_runnables_base_RunnableSerializable -> langchain_core_retrievers_BaseRetriever
  langchain_core_retrievers_BaseRetriever -> langchain_core_vectorstores_VectorStoreRetriever

  langchain_core_runnables_base_RunnableSerializable -> langchain_core_language_models_base_BaseLanguageModel
  langchain_core_language_models_base_BaseLanguageModel -> langchain_core_language_models_chat_models_BaseChatModel
  langchain_core_language_models_chat_models_BaseChatModel -> langchain_openai_chat_models_base_ChatOpenAI
  langchain_core_runnables_base_RunnableSerializable -> langchain_core_prompts_base_BasePromptTemplate
  langchain_core_prompts_base_BasePromptTemplate -> langchain_core_prompts_chat_BaseChatPromptTemplate
  langchain_core_prompts_chat_BaseChatPromptTemplate -> langchain_core_prompts_chat_ChatPromptTemplate

}
