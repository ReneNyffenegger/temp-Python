
dir(inst)


*****


from random import randint

def xyz(length, min, max):
  return [ randint(min,max) for x in xrange(length) ]

*******

text = "hi\tthere\t\t\tmy main man"
print [splits for splits in text.split("\t") if splits is not ""]

******

from operator import add
individual = xyz(...)
sum = reduce(add, individual, 0)


*****
 
  Perl's chomp equivalent:
  str = str.rstrip('\n')

  str = str.rstrip() # strip all kinds of trailing whitespace 

*****

father = [1,2,3,4,5,6]
mother = [10,20,30,40,50,60]
child = father[:3] + mother[3:]

{ Tuples

  t = (1, 2, 3, 4, 5)
  print (len(t))

}

Create list {

# arrays are something different!

  a1 = []
  a1.append('foo')
  a1.append('bar')
  a1.append('baz')


  a2 = ['x'] * 42 # 42 elements

  print(len(a2))

}

Create dictionary {

  d1 = {}
  d1["age"] = 25

  d2 = {"age":25}


}

{ Slurp file

  with open('foo.txt') as fil: txt=fil.read()

}
{ Write to a file

    f=open('/tmp/xx', 'w')
    f.write('foo\n')
    f.write('bar\n')
    f.write('baz\n')
    f.close()

}
{ Iterating over a directory

    import os
    for f in os.listdir('/path/to/directory'):
        print(f)

}

{ Loops

  for x in ...
      if x == ..
         break    # 
         continue # return control to the beginning of the while loop

  for ...
  else
    # Loop is exhausted

}

Inheritance {

  class BaseException(object):
       def throw(self):
           raise self

}
{ die ...
  
  raise Exception('xyz')

  try:
    generate_exception()
  except SomeException as e:
    if not can_handle(e):
      raise
    handle_exception(e)


}

if {

  if x:
    ...
  elif y:
    ...
  else:

}

{ Increment operator

  v ++ ---> does not work
  v += 1

}

{ os.path

  if os.path.isfile(db_name):
     os.remove(db_name)

}

{ assert / in

  assert attribute in ('series', 'publisher', 'issue', 'tags')

}

{ Dates

  today = date.today()

}

{ printf

    print("a=%d, b=%s" % (4, 'six'))
    print('a={:d}, b={:s}'.format(4, 'six'))   # Python 3 recommendation

}

r, u, f- strings {

    f-strings: These strings may contain replacement fields, which are expressions delimited by curly braces {}. While other string literals always have a constant value, formatted strings are really expressions evaluated at run time.

    print(f'a={f(x,n):d}, b={g(x,n):d}')



}
{ String concatenation

  str_1 + str_2

}

{ try / except

  try:
    …

    sys.exit(1) # will be caught...
  except BaseException as e:
    print ( str(e) )


}

{ if ... == "__main__ "

  https://stackoverflow.com/questions/1590608/is-it-possible-to-forward-declare-a-function-in-python

  if __name__=="__main__":
     main()

}
{ if ... else on one line (  Inline if-else EXPRESSION )

  print('yes' if b else 'no')

}
{ Reading a file line for line

  with open(sys.argv[1]) as f:
      for line in f:

  Reading one line only:
     f.readline()

}
{ Assigning value from .split() to variables


  var_1, var_2, var_3, var_4, var_5 = str.split()

  str = "foo\tbar\tbaz"
  ar = str.split("\t")

}
{ Encode / decode

  txt.encode('utf-8')
  txt.decode('utf-8')

}
{ classes

  

}
{ Assignment is a statement. Not an expression

  In Python, assignment is a statement, not an expression, and can therefore
  not be used inside an arbitrary expression. This means that common C idioms
  like:
  
  while (line = readline(file)) {
      ...do something with line...
  }
  
  or
  
  if (match = search(target)) {
      ...do something with match...
  }


  { Read ahead pattern

    line = f.readline()
    while line:
          ...
          line = f.readline()

  }
  { while true

     while True:
     line = f.readline()
     if not line:
         break
     ...  # do something with line

  }

}
{ For loops

  for i in range(1, 10):
      …

  for i in range(1,10:
      …
  else:
      …

}
