This proposal aims to answer that need by making writing explicitly
asynchronous, concurrent Python code easier and more Pythonic.

It is proposed to make coroutines a proper standalone concept in Python along with supporting syntax.

This PEP assumes that the asynchronous tasks are scheduled and coordinated by an Event Loop similar to that of stdlib module asyncio.events.AbstractEventLoop. 

Great effort has been made to make sure that coroutines and generators are
treated as distinct concepts:
   - Native coroutine objects do not implement __iter__ and __next__ methods.
  

Definition of a NATIVE COROUTINE:

     async def read_data(db):   # --> see below: async def functions are always coroutines
        pass
  
  
   Adding `await`
      async def read_data(db):
         data = await db.fetch('SELECT ...')   # <-- The new `await` expression is used to obtain a result of coroutine execution.
                                               #     await, similarly to yield from, suspends execution of read_data coroutine until db.fetch awaitable completes and returns the result data.
         ...
       
await only accepts an awaitable, which can be one of:
  - A native coroutine object returned from a native coroutine function.
  - A generator-based coroutine object returned from a function decorated with
    types.coroutine().
  - An object with an __await__ method returning an iterator.


Key properties of coroutines
  - async def functions are always coroutines, even if they do not contain
    await expressions.
  - It is a SyntaxError to have yield or yield from expressions in an async
    function.
  - Internally, two new code object flags were introduced:
    - CO_COROUTINE is used to mark native coroutines (defined with new syntax).
    - CO_ITERABLE_COROUTINE is used to make generator-based coroutines
      compatible with native coroutines (set by types.coroutine() function).

  - Regular generators, when called, return a generator object; similarly,
    coroutines return a coroutine object.
  - StopIteration exceptions are not propagated out of coroutines, and are
    replaced with a RuntimeError. For regular generators such behavior requires
    a future import (see PEP 479).
  - When a native coroutine is garbage collected, a RuntimeWarning is raised if it was never awaited on (see also Debugging Features).
  - See also Coroutine objects section.

A new function is added to types: `coroutine(fn)`  ( It allows interoperability between existing generator-based coroutines in asyncio and native coroutines introduced by this PEP: )
  @types.coroutine 
  def process_data(db):
      data = yield from read_data(db)
    ...

a new magic method called __await__ is added.
  Objects with __await__ method are called Future-like objects in the rest of
  this PEP.

Two new magic methods are added:
   __aenter__ and
   __aexit__.
   Both must return an awaitable.

Environment variable:
  PYTHONASYNCIODEBUG

Beginner's misstake:
   @asyncio.coroutine
   def useful():
       asyncio.sleep(1) # this will do nothing without 'yield from'

See als
  PEP  342 Implementation of couroutines with generators.
  PEP  380 Introduction of `yield from` syntax
  PEP  479 Change StopIteration handling inside generators
  PEP 3152 Cofunctions proposal  - proposes a different mechanism for coroutines (called “cofunctions”). REJECTED.
  PEP 3156 asyncio framework

  https://stackoverflow.com/questions/50757497/simplest-async-await-example-possible-in-python
