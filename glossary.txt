Native coroutine function
   A coroutine function is declared with async def. It uses await and return
   value; see New Coroutine Declaration Syntax for details.

Native coroutine
   Returned from a native coroutine function. See Await Expression for details.

Generator-based coroutine function
   Coroutines based on generator syntax. Most common example are functions
   decorated with @asyncio.coroutine.

Generator-based coroutine
   Returned from a generator-based coroutine function.

Coroutine
   Either native coroutine or generator-based coroutine.

Coroutine object
   Either native coroutine object or generator-based coroutine object.

Future-like object
   An object with an __await__ method, or a C object with tp_as_async->am_await
   function, returning an iterator. Can be consumed by an await expression in a
   coroutine. A coroutine waiting for a Future-like object is suspended until
   the Future-like object’s __await__ completes, and returns the result. See
   Await Expression for details.

Awaitable
   A Future-like object or a coroutine object. See Await Expression for
   details.

Asynchronous context manager
   An asynchronous context manager has __aenter__ and __aexit__ methods and can
   be used with async with. See Asynchronous Context Managers and “async with”
   for details.

Asynchronous iterable
   An object with an __aiter__ method, which must return an asynchronous
   iterator object. Can be used with async for. See Asynchronous Iterators and
   “async for” for details.
   
Asynchronous iterator
   An asynchronous iterator has an __anext__ method. See Asynchronous Iterators
   and “async for” for details.

